import MessagePack

public extension Client {
  {% for function in functions %}
  /// {{ function.description }}{% if function.isDeprecated %}
  @available(*, deprecated){% endif %}
  func {{ function.name }}({% for parameter in function.parameters %}{{ parameter.name }}: {{ parameter.type }}{% if not forloop.last %}, {% endif %}{% endfor %}) async throws {% if function.returnType %} -> {{ function.returnType }} {% endif %} {
    {% if function.returnType %}{% if function.returnType != "MessagePackValue" %} let result = {% endif %}{% else %} _ = {% endif %}try await request("{{ function.originalName }}", [{{ function.parametersInitializationSignature }}])
    
    {% if function.returnType and function.returnType != "MessagePackValue" %}
    guard let value = {{ function.obtainingReturnValue }} else {
      throw "Invalid return value type."
    }
    
    return value
    {% endif %}
    
    {% if not forloop.last %}
    
    {% endif %}
  }
  {% if not forloop.last %}
  {% endif %}
  {% endfor %}
}
