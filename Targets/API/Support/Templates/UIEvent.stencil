import MessagePack
import Library
import Conversations

public enum UIEvent {
  {% for uiEvent in uiEvents %}
  /// {{ uiEvent.description }}
  case {{ uiEvent.name }}({% if uiEvent.parametersType %}[UIEvents.{{ uiEvent.parametersType }}]{% else %}count: Int{% endif %})

  
  {% endfor %}

  public init?(method: String, parametersArray: [[MessagePackValue]]) {
    switch method {
      {% for uiEvent in uiEvents %}
      case "{{ uiEvent.originalName }}":
        {% if uiEvent.parametersType %}var children = [UIEvents.{{ uiEvent.parametersType }}]()
        
        for parameters in parametersArray {
          guard let child = UIEvents.{{ uiEvent.parametersType }}(parameters: parameters) else {
            return nil
          }
          
          children.append(child)
        }
        
        self = .{{ uiEvent.name }}(children)
      {% else %}self = .{{ uiEvent.name }}(count: parametersArray.count){% endif %}
        
      {% endfor %}
      default:
        assertionFailure("unknown UI event method \(method)")
        return nil
    }
  }
}
