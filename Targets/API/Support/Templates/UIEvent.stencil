import MessagePack
import Library

public enum UIEvent {
  {% for uiEvent in uiEvents %}
  /// {{ uiEvent.description }}
  case {{ uiEvent.name }}{% if uiEvent.parametersType %}({% if uiEvent.isArray %}[{% endif %}UIEvents.{{ uiEvent.parametersType }}{% if uiEvent.isArray %}]{% endif %}){% endif %}
  
  
  {% endfor %}
  
  /// Unknown event.
  case unknown(description: String)

  public init(method: Method) throws {
    switch method.name {
      {% for uiEvent in uiEvents %}
      case "{{ uiEvent.originalName }}":
      {% if uiEvent.parametersType %}{% if uiEvent.isArray %}let children = try method.parameters
          .map { parameter -> UIEvents.{{ uiEvent.parametersType }} in
            guard let childParameters = parameter.arrayValue else {
              throw "not an array, parameter \(parameter)"
            }
            return try .fromUIEvent(parameters: childParameters)
          }
        self = .{{ uiEvent.name }}(children)
        {% else %}self = .{{ uiEvent.name }}(try .fromUIEvent(parameters: method.parameters))
        {% endif %}
      {% else %}self = .{{ uiEvent.name }}{% endif %}
        
      {% endfor %}
      default:
        self = .unknown(description: "\(method)")
    }
  }
}
