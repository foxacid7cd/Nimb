import Library

public enum UIEvents {
  {% for model in uiEventModels %}
  public struct {{ model.parametersType }} {
    {% for parameter in model.parameters %}public var {{ parameter.name }}: {{ parameter.type }}
    {% endfor %}
    
    public init({% for parameter in model.parameters %}{{ parameter.name }}: {{ parameter.type }}{% if not forloop.last %}, {% endif %}{% endfor %}) {
      {% for parameter in model.parameters %}self.{{ parameter.name }} = {{ parameter.name }}
      {% endfor %}
    }
    
    public init(parameters: [Value]) throws {
      var previousPosition: Int?
      func next<ValueType>(_ entity: String, _ transform: (Value) -> ValueType?, file: StaticString = #fileID, line: UInt = #line) throws -> ValueType {
        let currentPosition = previousPosition.map { $0 + 1 } ?? 0
        defer { previousPosition = currentPosition }
        
        guard parameters.count > currentPosition, let value = transform(parameters[currentPosition]) else {
          throw "element at index \(currentPosition) is expected to be \(entity)".fail()
        }
        
        return value
      }
      
      func finalize(_ entity: String, file: StaticString = #fileID, line: UInt = #line) throws {
        guard let previousPosition, previousPosition == parameters.count - 1 else {
          throw "\(entity) is expected to be created from \(previousPosition.map { $0 + 1 } ?? 0) elements, but \(parameters.count) elements were passed".fail()
        }
      }
      
      {% for parameter in model.parameters %}
      let {{ parameter.name }} = try next("{{ parameter.type }} representing parameter {{ parameter.name }}", { {{ parameter.obtainingValue }} }){% endfor %}
      try finalize("UIEvents.{{ model.name }}")
      
      self = .init({% for parameter in model.parameters %}{{ parameter.name }}: {{ parameter.name }}{% if not forloop.last %}, {% endif %}{% endfor %})
    }
  }
  {% endfor %}
}
