import Foundation
import Library

public enum ExtendedTypes {
{% for type in types %}
  public struct {{ type.name }}: ExtendedType, Hashable {
    public var data: Data
    
    public init(data: Data) {
      self.data = data
    }

    public static var id: Int8 {
      {{ type.id }}
    }
    
    public static var prefix: String {
      "{{ type.prefix }}"
    }
  }
{% endfor %}
}

public protocol ExtendedType {
  var data: Data { get }
  init(data: Data)
  
  static var id: Int8 { get }
  static var prefix: String { get }
}

public extension ExtendedType {
  init(value: Value) throws {
    guard let (id, data) = value.extendedValue else {
      throw "Extended data value expected".fail()
    }
    
    guard id == Self.id else {
      throw "Invalid extended data value id, expected \(Self.id), got \(id)".fail()
    }
    
    self.init(data: data)
  }
  
  var value: Value {
    .extended(Self.id, data)
  }
}
