import Foundation
import Library

{% for type in types %}
public struct {{ type.name }}: NvimType, Hashable {
  public var opaqueData: Data
  
  public init(opaqueData: Data) {
    self.opaqueData = opaqueData
  }

  public static var id: Int8 {
    {{ type.id }}
  }
  
  public static var prefix: String {
    "{{ type.prefix }}"
  }
}
{% endfor %}

public protocol NvimType {
  var opaqueData: Data { get }
  init(opaqueData: Data)
  
  static var id: Int8 { get }
  static var prefix: String { get }
}

public extension NvimType {
  init(value: Value) throws {
    guard let (id, data) = value.extendedValue else {
      throw "Extended data value expected".fail()
    }
    
    guard id == Self.id else {
      throw "Invalid extended data value id, expected \(Self.id), got \(id)".fail()
    }
    
    self.init(opaqueData: data)
  }
  
  var value: Value {
    .extended(Self.id, opaqueData)
  }
}
